	#include "mcu.inc"

	radix decimal

.bitsreverse code
	global bitsReverseByte

;
; Take a byte in W, reverse the bits, and return the result in W.
;
; Operation is as follows:
;   Shift bit 0 into C and clear bit 7.  This leaves bits 7-1 in bits 6-0, ie. _7654321.
;   A 128-byte (7-bit) look-up is performed to reverse the lowest 7 bits; the bits are returned in the MSbs as 1234567_
;   The carry from the previous right-shift (bit 0) is rotated back into bit 7, leaving 01234567.
;
; A 256-byte look-up table is faster and executes in 4 cycles but uses almost twice as much flash.  This hybrid takes 10 cycles.
;
bitsReverseByte:
	lsrf WREG, W
	call reversedSeven
	rrf WREG, W
	return

reversedSeven:
	brw
	retlw b'00000000'
	retlw b'10000000'
	retlw b'01000000'
	retlw b'11000000'
	retlw b'00100000'
	retlw b'10100000'
	retlw b'01100000'
	retlw b'11100000'
	retlw b'00010000'
	retlw b'10010000'
	retlw b'01010000'
	retlw b'11010000'
	retlw b'00110000'
	retlw b'10110000'
	retlw b'01110000'
	retlw b'11110000'
	retlw b'00001000'
	retlw b'10001000'
	retlw b'01001000'
	retlw b'11001000'
	retlw b'00101000'
	retlw b'10101000'
	retlw b'01101000'
	retlw b'11101000'
	retlw b'00011000'
	retlw b'10011000'
	retlw b'01011000'
	retlw b'11011000'
	retlw b'00111000'
	retlw b'10111000'
	retlw b'01111000'
	retlw b'11111000'
	retlw b'00000100'
	retlw b'10000100'
	retlw b'01000100'
	retlw b'11000100'
	retlw b'00100100'
	retlw b'10100100'
	retlw b'01100100'
	retlw b'11100100'
	retlw b'00010100'
	retlw b'10010100'
	retlw b'01010100'
	retlw b'11010100'
	retlw b'00110100'
	retlw b'10110100'
	retlw b'01110100'
	retlw b'11110100'
	retlw b'00001100'
	retlw b'10001100'
	retlw b'01001100'
	retlw b'11001100'
	retlw b'00101100'
	retlw b'10101100'
	retlw b'01101100'
	retlw b'11101100'
	retlw b'00011100'
	retlw b'10011100'
	retlw b'01011100'
	retlw b'11011100'
	retlw b'00111100'
	retlw b'10111100'
	retlw b'01111100'
	retlw b'11111100'
	retlw b'00000010'
	retlw b'10000010'
	retlw b'01000010'
	retlw b'11000010'
	retlw b'00100010'
	retlw b'10100010'
	retlw b'01100010'
	retlw b'11100010'
	retlw b'00010010'
	retlw b'10010010'
	retlw b'01010010'
	retlw b'11010010'
	retlw b'00110010'
	retlw b'10110010'
	retlw b'01110010'
	retlw b'11110010'
	retlw b'00001010'
	retlw b'10001010'
	retlw b'01001010'
	retlw b'11001010'
	retlw b'00101010'
	retlw b'10101010'
	retlw b'01101010'
	retlw b'11101010'
	retlw b'00011010'
	retlw b'10011010'
	retlw b'01011010'
	retlw b'11011010'
	retlw b'00111010'
	retlw b'10111010'
	retlw b'01111010'
	retlw b'11111010'
	retlw b'00000110'
	retlw b'10000110'
	retlw b'01000110'
	retlw b'11000110'
	retlw b'00100110'
	retlw b'10100110'
	retlw b'01100110'
	retlw b'11100110'
	retlw b'00010110'
	retlw b'10010110'
	retlw b'01010110'
	retlw b'11010110'
	retlw b'00110110'
	retlw b'10110110'
	retlw b'01110110'
	retlw b'11110110'
	retlw b'00001110'
	retlw b'10001110'
	retlw b'01001110'
	retlw b'11001110'
	retlw b'00101110'
	retlw b'10101110'
	retlw b'01101110'
	retlw b'11101110'
	retlw b'00011110'
	retlw b'10011110'
	retlw b'01011110'
	retlw b'11011110'
	retlw b'00111110'
	retlw b'10111110'
	retlw b'01111110'
	retlw b'11111110'

	end
